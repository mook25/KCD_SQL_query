/* 활성 사업자 조회 쿼리 */
SELECT COUNT
	( DISTINCT b.ID ) AS "활성 사업자" 
FROM
	businesses b
	JOIN users u ON u.ID = b.owner_id
	JOIN credentials C ON C.business_id = b.
	ID LEFT JOIN autoreply_friends A ON A.user_id = u.ID 
WHERE
	u.settings ->> 'receive_reports' = 'true' 
	AND ( A.blocked IS FALSE OR A.blocked IS NULL ) 
	AND ((
			C.TYPE = 'Credentials::Crefia' 
			AND C.status != 2 
			) 
		OR ( C.TYPE = 'Credentials::CrefiaBusiness' AND C.status != 2 ) 
	OR ( C.TYPE = 'Credentials::HometaxLogin' AND C.status != 2 ) 
	OR ( C.TYPE = 'Credentials::HometaxCertificate' AND C.status != 2 ));
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ

/*일별 전환 통계(가입 기준)*/ 
SELECT
q.M AS "일별",
q.A AS "총가입자(a)",
q.C AS "탈퇴자(b)",
concat (
	COALESCE ( round((( q.C + 0.0 ) / ( q.A + 0.0 )) * 100, 2 ), 0.00 ),
	'%' 
) AS "탈퇴율(b/a)",
q.b AS "현가입자(c)",
q.d AS "카톡연동자(d)",
concat (
	COALESCE ( round((( q.d + 0.0 ) / ( q.b + 0.0 )) * 100, 2 ), 0.00 ),
	'%' 
) AS "카톡전환율(d/c)",
q.e AS "카톡차단자(e)",
concat (
	COALESCE ( round((( q.e + 0.0 ) / ( q.d + 0.0 )) * 100, 2 ), 0.00 ),
	'%' 
) AS "카톡차단율(e/d)",
q.z AS "총사업장(z)",
concat (
	COALESCE ( round((( q.z + 0.0 ) / ( q.b + 0.0 )) * 100, 2 ), 0.00 ),
	'%' 
) AS "사업장등록률(z/c)",
q.f AS "금융연동사업장(f)",
concat (
	COALESCE ( round((( q.f + 0.0 ) / ( q.b + 0.0 )) * 100, 2 ), 0.00 ),
	'%' 
) AS "가입-금융전환율(f/c)",
concat (
	COALESCE ( round((( q.f + 0.0 ) / ( q.z + 0.0 )) * 100, 2 ), 0.00 ),
	'%' 
) AS "사업장-금융전환율(f/z)",
q.G AS "금융차단사업장(g)",
concat (
	COALESCE ( round((( q.G + 0.0 ) / ( q.f + 0.0 )) * 100, 2 ), 0.00 ),
	'%' 
) AS "금융차단율(g/f)",
w.h AS "결제등록사업장(h)",
concat (
	COALESCE ( round((( w.h + 0.0 ) / ( q.f + 0.0 )) * 100, 2 ), 0.00 ),
	'%' 
) AS "결제전환율(h/f)" 
FROM
	(
	SELECT
		q.M,
		q.A,
		q.C,
		q.b,
		q.d,
		q.e,
		q.f,
		q.G,
		w.z 
	FROM
		(
		SELECT
			q.M,
			q.A,
			q.C,
			q.b,
			q.d,
			q.e,
			q.f,
			w.G 
		FROM
			(
			SELECT
				q.M,
				q.A,
				q.C,
				q.b,
				q.d,
				q.e,
				w.f 
			FROM
				(
				SELECT
					q.M,
					q.A,
					q.C,
					q.b,
					q.d,
					w.e 
				FROM
					(
					SELECT
						q.M,
						q.A,
						q.b,
						q.C,
						w.d 
					FROM
						(
						SELECT
							created_at :: DATE AS M,
							MAX ( ID ) - MIN ( ID ) + 1 AS A,
							COUNT ( * ) AS b,
							MAX ( ID ) - MIN ( ID ) + 1-count ( * ) AS C 
						FROM
							users 
						GROUP BY
							created_at :: DATE 
						) q
						LEFT JOIN (
						SELECT
							u.created_at :: DATE AS M,
							COUNT ( * ) AS d 
						FROM
							autoreply_friends
							A JOIN users u ON A.user_id = u.ID 
						GROUP BY
						M 
						) w ON q.M = w.M 
					) q
					LEFT JOIN (
					SELECT
						u.created_at :: DATE AS M,
						COUNT ( * ) AS e 
					FROM
						autoreply_friends
						A JOIN users u ON A.user_id = u.ID 
					WHERE
						A.blocked IS TRUE 
					GROUP BY
					M 
					) w ON q.M = w.M 
				) q
				LEFT JOIN (
				SELECT A
					.M AS M,
					COUNT ( * ) AS f 
				FROM
					(
					SELECT
						business_id AS ID,
						MIN ( b.created_at :: DATE ) AS M 
					FROM
						credentials
						C JOIN ( SELECT b.ID, u.created_at FROM businesses b JOIN users u ON b.owner_id = u.ID ) b ON b.ID = C.business_id 
					WHERE
						C.status != 2 
					GROUP BY
						C.business_id 
					) A 
				GROUP BY
					A.M 
				) w ON q.M = w.M 
			) q
			LEFT JOIN (
			SELECT
				q.DATE :: DATE AS M,
				COUNT ( * ) AS G 
			FROM
				(
				SELECT
					business_id AS ID,
					q.DATE AS DATE,
					COUNT ( * ) AS COUNT 
				FROM
					credentials
					C JOIN (
					SELECT
						b.ID,
						b.created_at :: DATE AS DATE 
					FROM
						(
						SELECT
							b.ID,
							b.owner_id,
							u.created_at 
						FROM
							businesses b
							JOIN users u ON b.owner_id = u.ID 
						) b
						JOIN autoreply_friends A ON b.owner_id = A.user_id 
					WHERE
						A.blocked IS TRUE 
					) q ON C.business_id = q.ID 
				WHERE
					status != 2 
				GROUP BY
					business_id,
					q.DATE 
				) q 
			GROUP BY
				q.DATE :: DATE 
			) w ON q.M = w.M 
		) q
		JOIN (
		SELECT
			u.created_at :: DATE AS M,
			COUNT ( * ) AS z 
		FROM
			businesses b
			JOIN users u ON b.owner_id = u.ID 
		GROUP BY
			u.created_at :: DATE 
		) w ON q.M = w.M 
	) q
	LEFT JOIN (
	SELECT
		b.created_at :: DATE AS M,
		COUNT ( * ) AS h 
	FROM
		(
		SELECT
			i.business_id,
			i.created_at 
		FROM
			( SELECT business_id, created_at FROM iamport_customers ) i
			JOIN subscriptions s ON i.business_id = s.business_id 
		WHERE
			s.status = 0 
		)
		A JOIN ( SELECT b.ID, u.created_at FROM businesses b JOIN users u ON b.owner_id = u.ID ) b ON A.business_id = b.ID 
	GROUP BY
	M 
	) w ON q.M = w.M 
ORDER BY
	1 DESC;
  
  
/*주별 전환 통계(가입 기준)*/ SELECT
q.M AS "주별",
q.A AS "총가입자(a)",
q.C AS "탈퇴자(b)",
concat (
	COALESCE ( round((( q.C + 0.0 ) / ( q.A + 0.0 )) * 100, 2 ), 0.00 ),
	'%' 
) AS "탈퇴율(b/a)",
q.b AS "현가입자(c)",
q.d AS "카톡연동자(d)",
concat (
	COALESCE ( round((( q.d + 0.0 ) / ( q.b + 0.0 )) * 100, 2 ), 0.00 ),
	'%' 
) AS "카톡전환율(d/c)",
q.e AS "카톡차단자(e)",
concat (
	COALESCE ( round((( q.e + 0.0 ) / ( q.d + 0.0 )) * 100, 2 ), 0.00 ),
	'%' 
) AS "카톡차단율(e/d)",
q.z AS "총사업장(z)",
concat (
	COALESCE ( round((( q.z + 0.0 ) / ( q.b + 0.0 )) * 100, 2 ), 0.00 ),
	'%' 
) AS "사업장등록률(z/c)",
q.f AS "금융연동사업장(f)",
concat (
	COALESCE ( round((( q.f + 0.0 ) / ( q.b + 0.0 )) * 100, 2 ), 0.00 ),
	'%' 
) AS "가입-금융전환율(f/c)",
concat (
	COALESCE ( round((( q.f + 0.0 ) / ( q.z + 0.0 )) * 100, 2 ), 0.00 ),
	'%' 
) AS "사업장-금융전환율(f/z)",
q.G AS "금융차단사업장(g)",
concat (
	COALESCE ( round((( q.G + 0.0 ) / ( q.f + 0.0 )) * 100, 2 ), 0.00 ),
	'%' 
) AS "금융차단율(g/f)",
w.h AS "결제등록사업장(h)",
concat (
	COALESCE ( round((( w.h + 0.0 ) / ( q.f + 0.0 )) * 100, 2 ), 0.00 ),
	'%' 
) AS "결제전환율(h/f)" 
FROM
	(
	SELECT
		q.M,
		q.A,
		q.C,
		q.b,
		q.d,
		q.e,
		q.f,
		q.G,
		w.z 
	FROM
		(
		SELECT
			q.M,
			q.A,
			q.C,
			q.b,
			q.d,
			q.e,
			q.f,
			w.G 
		FROM
			(
			SELECT
				q.M,
				q.A,
				q.C,
				q.b,
				q.d,
				q.e,
				w.f 
			FROM
				(
				SELECT
					q.M,
					q.A,
					q.C,
					q.b,
					q.d,
					w.e 
				FROM
					(
					SELECT
						q.M,
						q.A,
						q.b,
						q.C,
						w.d 
					FROM
						(
						SELECT
							to_char( created_at, 'yyyy-iw' ) AS M,
							MAX ( ID ) - MIN ( ID ) + 1 AS A,
							COUNT ( * ) AS b,
							MAX ( ID ) - MIN ( ID ) + 1-count ( * ) AS C 
						FROM
							users 
						GROUP BY
						to_char( created_at, 'yyyy-iw' )) q
						LEFT JOIN (
						SELECT
							to_char( u.created_at, 'yyyy-iw' ) AS M,
							COUNT ( * ) AS d 
						FROM
							autoreply_friends
							A JOIN users u ON A.user_id = u.ID
						GROUP BY
						M 
						) w ON q.M = w.M 
					) q
					LEFT JOIN (
					SELECT
						to_char( u.created_at, 'yyyy-iw' ) AS M,
						COUNT ( * ) AS e 
					FROM
						autoreply_friends
						A JOIN users u ON A.user_id = u.ID 
					WHERE
						A.blocked IS TRUE 
					GROUP BY
					M 
					) w ON q.M = w.M 
				) q
				LEFT JOIN (
				SELECT A
					.M AS M,
					COUNT ( * ) AS f 
				FROM
					(
					SELECT
						business_id AS ID,
						MIN (
						to_char( b.created_at, 'yyyy-iw' )) AS M 
					FROM
						credentials
						C JOIN ( SELECT b.ID, u.created_at FROM businesses b JOIN users u ON b.owner_id = u.ID ) b ON b.ID = C.business_id 
					WHERE
						C.status != 2 
					GROUP BY
						C.business_id 
					) A 
				GROUP BY
					A.M 
				) w ON q.M = w.M 
			) q
			LEFT JOIN (
			SELECT
				to_char( q.DATE, 'yyyy-iw' ) AS M,
				COUNT ( * ) AS G 
			FROM
				(
				SELECT
					business_id AS ID,
					q.DATE AS DATE,
					COUNT ( * ) AS COUNT 
				FROM
					credentials
					C JOIN (
					SELECT
						b.ID,
						b.created_at :: DATE AS DATE 
					FROM
						(
						SELECT
							b.ID,
							b.owner_id,
							u.created_at 
						FROM
							businesses b
							JOIN users u ON b.owner_id = u.ID 
						) b
						JOIN autoreply_friends A ON b.owner_id = A.user_id 
					WHERE
						A.blocked IS TRUE 
					) q ON C.business_id = q.ID 
				WHERE
					status != 2 
				GROUP BY
					business_id,
					q.DATE 
				) q 
			GROUP BY
			to_char( q.DATE, 'yyyy-iw' )) w ON q.M = w.M 
		) q
		JOIN (
		SELECT
			to_char( u.created_at, 'yyyy-iw' ) AS M,
			COUNT ( * ) AS z 
		FROM
			businesses b
			JOIN users u ON b.owner_id = u.ID 
		GROUP BY
		to_char( u.created_at, 'yyyy-iw' )) w ON q.M = w.M 
	) q
	LEFT JOIN (
	SELECT
		to_char( b.created_at, 'yyyy-iw' ) AS M,
		COUNT ( * ) AS h 
	FROM
		(
		SELECT
			i.business_id,
			i.created_at 
		FROM
			( SELECT business_id, created_at FROM iamport_customers ) i
			JOIN subscriptions s ON i.business_id = s.business_id 
		WHERE
			s.status = 0 
		)
		A JOIN ( SELECT b.ID, u.created_at FROM businesses b JOIN users u ON b.owner_id = u.ID ) b ON A.business_id = b.ID 
	GROUP BY
	M 
	) w ON q.M = w.M 
ORDER BY
	1 DESC;
  
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
/*주별 누적 통계*/ 
SELECT
q.M AS "주별",
q.A AS "누적가입자(a)",
concat (
	COALESCE (
		round(((
					q.A - (
					LAG ( q.A ) OVER ( ORDER BY q.M )) + 0.0 
					) / (( LAG ( q.A ) OVER ( ORDER BY q.M )) + 0.0 )) * 100,
			2 
		),
		0.00 
	),
	'%' 
) AS "◀증감(a)",
q.b AS "탈퇴자(b)",
concat (
	COALESCE (
		round(((
					q.b - (
					LAG ( q.b ) OVER ( ORDER BY q.M )) + 0.0 
					) / (( LAG ( q.b ) OVER ( ORDER BY q.M )) + 0.0 )) * 100,
			2 
		),
		0.00 
	),
	'%' 
) AS "◀증감(b)",
concat (
	COALESCE ( round((( q.b + 0.0 ) / ( q.A + 0.0 )) * 100, 2 ), 0.00 ),
	'%' 
) AS "탈퇴율(b/a)",
q.C AS "현가입자(c)",
q.d AS "카톡연동자(d)",
concat (
	COALESCE (
		round(((
					q.d - (
					LAG ( q.d ) OVER ( ORDER BY q.M )) + 0.0 
					) / (( LAG ( q.d ) OVER ( ORDER BY q.M )) + 0.0 )) * 100,
			2 
		),
		0.00 
	),
	'%' 
) AS "◀증감(d)",
concat (
	COALESCE ( round((( q.d + 0.0 ) / ( q.C + 0.0 )) * 100, 2 ), 0.00 ),
	'%' 
) AS "카톡전환율(d/c)",
q.e AS "카톡차단자(e)",
concat (
	COALESCE (
		round(((
					q.e - (
					LAG ( q.e ) OVER ( ORDER BY q.M )) + 0.0 
					) / (( LAG ( q.e ) OVER ( ORDER BY q.M )) + 0.0 )) * 100,
			2 
		),
		0.00 
	),
	'%' 
) AS "◀증감(e)",
concat (
	COALESCE ( round((( q.e + 0.0 ) / ( q.d + 0.0 )) * 100, 2 ), 0.00 ),
	'%' 
) AS "카톡차단율(e/d)",
q.z AS "누적사업장(z)",
concat (
	COALESCE (
		round(((
					q.z - (
					LAG ( q.z ) OVER ( ORDER BY q.M )) + 0.0 
					) / (( LAG ( q.z ) OVER ( ORDER BY q.M )) + 0.0 )) * 100,
			2 
		),
		0.00 
	),
	'%' 
) AS "◀증감(z)",
concat (
	COALESCE ( round((( q.z + 0.0 ) / ( q.C + 0.0 )) * 100, 2 ), 0.00 ),
	'%' 
) AS "사업장등록률(z/c)",
q.f AS "금융연동사업장(f)",
concat (
	COALESCE (
		round(((
					q.f - (
					LAG ( q.f ) OVER ( ORDER BY q.M )) + 0.0 
					) / (( LAG ( q.f ) OVER ( ORDER BY q.M )) + 0.0 )) * 100,
			2 
		),
		0.00 
	),
	'%' 
) AS "◀증감(f)",
concat (
	COALESCE ( round((( q.f + 0.0 ) / ( q.z + 0.0 )) * 100, 2 ), 0.00 ),
	'%' 
) AS "금융전환율(f/z)",
q.G AS "금융차단사업장(g)",
concat (
	COALESCE (
		round(((
					q.G - (
					LAG ( q.G ) OVER ( ORDER BY q.M )) + 0.0 
					) / (( LAG ( q.G ) OVER ( ORDER BY q.M )) + 0.0 )) * 100,
			2 
		),
		0.00 
	),
	'%' 
) AS "◀증감(g)",
concat (
	COALESCE ( round((( q.G + 0.0 ) / ( q.f + 0.0 )) * 100, 2 ), 0.00 ),
	'%' 
) AS "금융차단율(g/f)",
w.h AS "결제등록사업장(h)",
concat (
	COALESCE (
		round(((
					w.h - (
					LAG ( w.h ) OVER ( ORDER BY q.M )) + 0.0 
					) / (( LAG ( w.h ) OVER ( ORDER BY q.M )) + 0.0 )) * 100,
			2 
		),
		0.00 
	),
	'%' 
) AS "◀증감(h)",
concat (
	COALESCE ( round((( w.h + 0.0 ) / ( q.f + 0.0 )) * 100, 2 ), 0.00 ),
	'%' 
) AS "결제전환율(h/f)" 
FROM
	(
	SELECT
		q.M,
		q.A,
		q.b,
		q.C,
		q.d,
		q.e,
		q.f,
		q.G,
		w.z 
	FROM
		(
		SELECT
			q.M,
			q.A,
			q.b,
			q.C,
			q.d,
			q.e,
			q.f,
			w.G 
		FROM
			(
			SELECT
				q.M,
				q.A,
				q.b,
				q.C,
				q.d,
				q.e,
				w.f 
			FROM
				(
				SELECT
					q.M,
					q.A,
					q.b,
					q.C,
					q.d,
					w.e 
				FROM
					(
					SELECT
						q.M,
						q.A,
						q.b,
						q.C,
						w.d 
					FROM
						(
						SELECT
							e.M AS M,
							e.e AS A,
							SUM ( e.f ) OVER ( ORDER BY e.M ) AS C,
							e.e - (
							SUM ( e.f ) OVER ( ORDER BY e.M )) AS b 
						FROM
							(
							SELECT
								to_char( created_at, 'yyyy-iw' ) AS M,
								MAX ( ID ) AS e,
								COUNT ( * ) AS f 
							FROM
								users 
							GROUP BY
							to_char( created_at, 'yyyy-iw' )) e 
						) q
						LEFT JOIN (
						SELECT
							b.M AS M,
							SUM ( b.b ) OVER ( ORDER BY b.M ) AS d 
						FROM
							(
							SELECT
								to_char( A.created_at, 'yyyy-iw' ) AS M,
								COUNT ( * ) AS b 
							FROM
								autoreply_friends
								A JOIN users u ON A.user_id = u.ID 
							GROUP BY
							M 
							) b 
						) w ON q.M = w.M 
					) q
					LEFT JOIN (
					SELECT
						b.M AS M,
						SUM ( b.b ) OVER ( ORDER BY b.M ) AS e 
					FROM
						(
						SELECT
							to_char( A.updated_at, 'yyyy-iw' ) AS M,
							COUNT ( * ) AS b 
						FROM
							autoreply_friends
							A JOIN users u ON A.user_id = u.ID 
						WHERE
							A.blocked IS TRUE 
						GROUP BY
						M 
						) b 
					) w ON q.M = w.M 
				) q
				LEFT JOIN (
				SELECT C
					.M AS M,
					SUM ( C.C ) OVER ( ORDER BY C.M ) AS f 
				FROM
					(
					SELECT A
						.M AS M,
						COUNT ( * ) AS C 
					FROM
						( SELECT business_id AS ID, MIN ( to_char( created_at, 'yyyy-iw' )) AS M FROM credentials WHERE status != 2 GROUP BY business_id ) A 
					GROUP BY
						A.M 
					) C 
				) w ON q.M = w.M 
			) q
			LEFT JOIN (
			SELECT
				b.M AS M,
				SUM ( b.b ) OVER ( ORDER BY b.M ) AS G 
			FROM
				(
				SELECT
					to_char( q.DATE, 'yyyy-iw' ) AS M,
					COUNT ( * ) AS b 
				FROM
					(
					SELECT
						business_id AS ID,
						q.DATE AS DATE,
						COUNT ( * ) AS COUNT 
					FROM
						credentials
						C JOIN (
						SELECT
							b.ID,
							A.updated_at :: DATE AS DATE 
						FROM
							businesses b
							JOIN autoreply_friends A ON b.owner_id = A.user_id 
						WHERE
							A.blocked IS TRUE 
						) q ON C.business_id = q.ID 
					WHERE
						status != 2 
					GROUP BY
						business_id,
						q.DATE 
					) q 
				GROUP BY
				to_char( q.DATE, 'yyyy-iw' )) b 
			) w ON q.M = w.M 
		) q
		LEFT JOIN (
		SELECT
			d.M AS M,
			SUM ( d.z ) OVER ( ORDER BY d.M ) AS z 
		FROM
			( SELECT to_char( created_at, 'yyyy-iw' ) AS M, COUNT ( * ) z FROM businesses GROUP BY M ) d 
		) w ON q.M = w.M 
	) q
	LEFT JOIN (
	SELECT
		d.M AS M,
		SUM ( d.d ) OVER ( ORDER BY d.M ) AS h 
	FROM
		( SELECT to_char( created_at, 'yyyy-iw' ) AS M, COUNT ( * ) d FROM iamport_customers GROUP BY M ) d 
	) w ON q.M = w.M 
ORDER BY
	1 DESC;
  
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ


